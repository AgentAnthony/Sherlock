These are the sections I will clean up and add later


# FTP Testing
# echo "--------------------------------------------------"
# echo "Performing further FTP testing (21of 30)"
# echo "--------------------------------------------------"
# for IP in $(cat $wrktmp/FinalTargets); do
#     for PORTNUM in ${NEW[*]}; do
        # STAT1=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "Status: Up" -m 1 -o | cut -c 9-10) # Check to make sure the host is in fact up
        # STAT2=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/open/tcp//http" -m 1 -o | grep "open" -o) # Check to see if the port is open & is a web service
        # STAT3=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/filtered/tcp//http" -m 1 -o | grep "filtered" -o) # Check to see if the port is filtered & is a web service
        # STAT4=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/open/tcp//ssl" | grep "ssl" -o) # Check to see if the port is open & ssl enabled
        # STAT5=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/filtered/tcp//ssl" | grep "ssl" -o) # Check to see if the port is filtered & ssl enabled
#         if [ "$STAT1" == "Up" ] && [ "$STAT2" == "open" ] || [ "$STAT3" == "filtered" ] && [ "$PORTNUM" != 80 ]; then
#             echo Scanning $web:$PORTNUM
#             echo "--------------------------------------------------"
#             docker run --rm -v $(pwd):/usr/src/app fhunii/retire.js
#             cat $wrkpth/SSL/$prj_name-$IP:$PORTNUM-TestSSL_output-$web.txt | aha -t "TestSSL Output for $IP:$PORTNUM" > $wrkpth/SSL/$prj_name-$IP:$PORTNUM-TestSSL_output-$web.html
#             cat $wrkpth/SSLScan/$prj_name-$IP:$PORTNUM-sslscan_output-$web.txt | aha -t "SSLScan Output for $IP:$PORTNUM" > $wrkpth/SSLScan/$prj_name-$IP:$PORTNUM-sslscan_output-$web.html
#             echo "--------------------------------------------------"
#         fi
#     done
# done
# mv $PWD/*.csv $wrkpth/SSLScan/
# echo

# Using GOLismero
# echo "--------------------------------------------------"
# echo "Performing scan using GOLismero (22of 30)"
# echo "--------------------------------------------------"
# golismero scan -i $wrkpth/Nmap/$prj_name-nmap_portknock.xml audit-name "$prj_name" -o "$wrkpth/GOLismero/$prj_name-$web-$PORTNUM-golismero_output.html $wrkpth/GOLismero/$prj_name-$web-$PORTNUM-golismero_output.txt" -db $wrkpth/GOLismero/$prj_name-$web-$PORTNUM-golismero_output.db
# echo

# # Using RetireJS
# echo "--------------------------------------------------"
# echo "Performing scan using RetireJS (23of 30)"
# echo "--------------------------------------------------"
# for IP in $(cat $wrktmp/FinalTargets); do
#     for PORTNUM in ${NEW[*]}; do
        # STAT1=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "Status: Up" -m 1 -o | cut -c 9-10) # Check to make sure the host is in fact up
        # STAT2=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/open/tcp//http" -m 1 -o | grep "open" -o) # Check to see if the port is open & is a web service
        # STAT3=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/filtered/tcp//http" -m 1 -o | grep "filtered" -o) # Check to see if the port is filtered & is a web service
        # STAT4=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/open/tcp//ssl" | grep "ssl" -o) # Check to see if the port is open & ssl enabled
        # STAT5=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/filtered/tcp//ssl" | grep "ssl" -o) # Check to see if the port is filtered & ssl enabled
#         if [ "$STAT1" == "Up" ] && [ "$STAT2" == "open" ] || [ "$STAT3" == "filtered" ] && [ "$PORTNUM" != 80 ]; then
#             echo Scanning $web:$PORTNUM
#             echo "--------------------------------------------------"
#             docker run --rm -v $(pwd):/usr/src/app fhunii/retire.js
#             cat $wrkpth/SSL/$prj_name-$IP:$PORTNUM-TestSSL_output-$web.txt | aha -t "TestSSL Output for $IP:$PORTNUM" > $wrkpth/SSL/$prj_name-$IP:$PORTNUM-TestSSL_output-$web.html
#             cat $wrkpth/SSLScan/$prj_name-$IP:$PORTNUM-sslscan_output-$web.txt | aha -t "SSLScan Output for $IP:$PORTNUM" > $wrkpth/SSLScan/$prj_name-$IP:$PORTNUM-sslscan_output-$web.html
#             echo "--------------------------------------------------"
#         fi
#     done
# done
# mv $PWD/*.csv $wrkpth/SSLScan/
# echo

# SMTP Testing
# echo "--------------------------------------------------"
# echo "Performing further SMTP testing (24of 30)"
# echo "--------------------------------------------------"
# for IP in $(cat $wrktmp/FinalTargets); do
#     for PORTNUM in ${NEW[*]}; do
        # STAT1=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "Status: Up" -m 1 -o | cut -c 9-10) # Check to make sure the host is in fact up
        # STAT2=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/open/tcp//http" -m 1 -o | grep "open" -o) # Check to see if the port is open & is a web service
        # STAT3=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/filtered/tcp//http" -m 1 -o | grep "filtered" -o) # Check to see if the port is filtered & is a web service
        # STAT4=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/open/tcp//ssl" | grep "ssl" -o) # Check to see if the port is open & ssl enabled
        # STAT5=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/filtered/tcp//ssl" | grep "ssl" -o) # Check to see if the port is filtered & ssl enabled
#         if [ "$STAT1" == "Up" ] && [ "$STAT2" == "open" ] || [ "$STAT3" == "filtered" ] && [ "$PORTNUM" != 80 ]; then
#             echo Scanning $web:$PORTNUM
#             echo "--------------------------------------------------"
#             docker run --rm -v $(pwd):/usr/src/app fhunii/retire.js
#             cat $wrkpth/SSL/$prj_name-$IP:$PORTNUM-TestSSL_output-$web.txt | aha -t "TestSSL Output for $IP:$PORTNUM" > $wrkpth/SSL/$prj_name-$IP:$PORTNUM-TestSSL_output-$web.html
#             cat $wrkpth/SSLScan/$prj_name-$IP:$PORTNUM-sslscan_output-$web.txt | aha -t "SSLScan Output for $IP:$PORTNUM" > $wrkpth/SSLScan/$prj_name-$IP:$PORTNUM-sslscan_output-$web.html
#             echo "--------------------------------------------------"
#         fi
#     done
# done
# mv $PWD/*.csv $wrkpth/SSLScan/
# echo

# SMB Testing
# echo "--------------------------------------------------"
# echo "Performing further SMB testing (25of 30)"
# echo "--------------------------------------------------"
# for IP in $(cat $wrktmp/FinalTargets); do
#     for PORTNUM in ${NEW[*]}; do
        # STAT1=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "Status: Up" -m 1 -o | cut -c 9-10) # Check to make sure the host is in fact up
        # STAT2=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/open/tcp//http" -m 1 -o | grep "open" -o) # Check to see if the port is open & is a web service
        # STAT3=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/filtered/tcp//http" -m 1 -o | grep "filtered" -o) # Check to see if the port is filtered & is a web service
        # STAT4=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/open/tcp//ssl" | grep "ssl" -o) # Check to see if the port is open & ssl enabled
        # STAT5=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/filtered/tcp//ssl" | grep "ssl" -o) # Check to see if the port is filtered & ssl enabled
#         if [ "$STAT1" == "Up" ] && [ "$STAT2" == "open" ] || [ "$STAT3" == "filtered" ] && [ "$PORTNUM" != 80 ]; then
#             echo Scanning $web:$PORTNUM
#             echo "--------------------------------------------------"
#             docker run --rm -v $(pwd):/usr/src/app fhunii/retire.js
#             cat $wrkpth/SSL/$prj_name-$IP:$PORTNUM-TestSSL_output-$web.txt | aha -t "TestSSL Output for $IP:$PORTNUM" > $wrkpth/SSL/$prj_name-$IP:$PORTNUM-TestSSL_output-$web.html
#             cat $wrkpth/SSLScan/$prj_name-$IP:$PORTNUM-sslscan_output-$web.txt | aha -t "SSLScan Output for $IP:$PORTNUM" > $wrkpth/SSLScan/$prj_name-$IP:$PORTNUM-sslscan_output-$web.html
#             echo "--------------------------------------------------"
#         fi
#     done
# done
# mv $PWD/*.csv $wrkpth/SSLScan/
# echo

# RDP Testing
# echo "--------------------------------------------------"
# echo "Performing further RDP testing (26of 30)"
# echo "--------------------------------------------------"
# for IP in $(cat $wrktmp/FinalTargets); do
#     for PORTNUM in ${NEW[*]}; do
        # STAT1=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "Status: Up" -m 1 -o | cut -c 9-10) # Check to make sure the host is in fact up
        # STAT2=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/open/tcp//http" -m 1 -o | grep "open" -o) # Check to see if the port is open & is a web service
        # STAT3=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/filtered/tcp//http" -m 1 -o | grep "filtered" -o) # Check to see if the port is filtered & is a web service
        # STAT4=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/open/tcp//ssl" | grep "ssl" -o) # Check to see if the port is open & ssl enabled
        # STAT5=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/filtered/tcp//ssl" | grep "ssl" -o) # Check to see if the port is filtered & ssl enabled
#         if [ "$STAT1" == "Up" ] && [ "$STAT2" == "open" ] || [ "$STAT3" == "filtered" ] && [ "$PORTNUM" != 80 ]; then
#             echo Scanning $web:$PORTNUM
#             echo "--------------------------------------------------"
#             docker run --rm -v $(pwd):/usr/src/app fhunii/retire.js
#             cat $wrkpth/SSL/$prj_name-$IP:$PORTNUM-TestSSL_output-$web.txt | aha -t "TestSSL Output for $IP:$PORTNUM" > $wrkpth/SSL/$prj_name-$IP:$PORTNUM-TestSSL_output-$web.html
#             cat $wrkpth/SSLScan/$prj_name-$IP:$PORTNUM-sslscan_output-$web.txt | aha -t "SSLScan Output for $IP:$PORTNUM" > $wrkpth/SSLScan/$prj_name-$IP:$PORTNUM-sslscan_output-$web.html
#             echo "--------------------------------------------------"
#         fi
#     done
# done
# mv $PWD/*.csv $wrkpth/SSLScan/
# echo

# SQL Testing
# echo "--------------------------------------------------"
# echo "Performing further RDP testing (27of 30)"
# echo "--------------------------------------------------"
# for IP in $(cat $wrktmp/FinalTargets); do
#     for PORTNUM in ${NEW[*]}; do
        # STAT1=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "Status: Up" -m 1 -o | cut -c 9-10) # Check to make sure the host is in fact up
        # STAT2=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/open/tcp//http" -m 1 -o | grep "open" -o) # Check to see if the port is open & is a web service
        # STAT3=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/filtered/tcp//http" -m 1 -o | grep "filtered" -o) # Check to see if the port is filtered & is a web service
        # STAT4=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/open/tcp//ssl" | grep "ssl" -o) # Check to see if the port is open & ssl enabled
        # STAT5=$(cat $wrkpth/Nmap/$prj_name-nmap_portknock.gnmap | grep $web | grep "$PORTNUM/filtered/tcp//ssl" | grep "ssl" -o) # Check to see if the port is filtered & ssl enabled
#         if [ "$STAT1" == "Up" ] && [ "$STAT2" == "open" ] || [ "$STAT3" == "filtered" ] && [ "$PORTNUM" != 80 ]; then
#             echo Scanning $web:$PORTNUM
#             echo "--------------------------------------------------"
#             docker run --rm -v $(pwd):/usr/src/app fhunii/retire.js
#             cat $wrkpth/SSL/$prj_name-$IP:$PORTNUM-TestSSL_output-$web.txt | aha -t "TestSSL Output for $IP:$PORTNUM" > $wrkpth/SSL/$prj_name-$IP:$PORTNUM-TestSSL_output-$web.html
#             cat $wrkpth/SSLScan/$prj_name-$IP:$PORTNUM-sslscan_output-$web.txt | aha -t "SSLScan Output for $IP:$PORTNUM" > $wrkpth/SSLScan/$prj_name-$IP:$PORTNUM-sslscan_output-$web.html
#             echo "--------------------------------------------------"
#         fi
#     done
# done
# mv $PWD/*.csv $wrkpth/SSLScan/
# echo